@model CatGarden.Web.ViewModels.Cat.CatFormModel
@using static CatGarden.Common.Enums
@using CatGarden.Services.Data.Interfaces
@using CatGarden.Web.Infrastructure.Extensions
@inject IImageService ImageService

@{
    ViewData["Title"] = "Add Cat";
}
<!-- Include Dropzone.js -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/dropzone/5.7.2/min/dropzone.min.js"></script>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/dropzone/5.7.2/min/dropzone.min.css" />


<style>
    .set-as-cover-btn {
        background-color: yellowgreen; /* Green color */
        color: #fff; /* White text */
        border: none;
        padding: 5px 10px;
        border-radius: 4px;
        cursor: pointer;
    }

        .set-as-cover-btn.btn-success {
            background-color: #218838; /* Yellow green color */
        }
</style>


<div style="display: flex; justify-content: center; align-items: center;">
    <div style="max-width: 600px; width: 100%;">
        <h2 class="text-center">@ViewData["Title"]</h2>

        <form id="catForm" asp-action="Add" method="post" enctype="multipart/form-data">
            <div class="form-group">
                <label asp-for="Name"></label>
                <input asp-for="Name" class="form-control" />
                <span asp-validation-for="Name" class="text-danger"></span>
            </div>

            <div class="form-group">
                <label asp-for="Age"></label>
                <input asp-for="Age" class="form-control" />
                <span asp-validation-for="Age" class="text-danger"></span>
            </div>

            <div class="form-group">
                <label asp-for="Gender"></label>
                <select asp-for="Gender" class="form-control">
                    <option value="">Select Gender</option>
                    @foreach (var gender in Enum.GetValues(typeof(Gender)))
                    {
                        <option value="@gender">@gender</option>
                    }
                </select>
                <span asp-validation-for="Gender" class="text-danger"></span>
            </div>

            <div class="form-group">
                <label asp-for="Breed"></label>
                <select asp-for="Breed" class="form-control">
                    <option value="">Select Breed</option>
                    @foreach (Breed breed in Enum.GetValues(typeof(Breed)))
                    {
                        <option value="@breed.ToString()">@EnumExtensions.GetDisplayName(breed)</option>
                    }
                </select>
                <span asp-validation-for="Breed" class="text-danger"></span>
            </div>



            <div class="form-group">
                <label asp-for="Color"></label>
                <select asp-for="Color" class="form-control">
                    <option value="">Select Color</option>
                    @foreach (var color in Enum.GetValues(typeof(Color)))
                    {
                        <option value="@color">@color</option>
                    }
                </select>
                <span asp-validation-for="Color" class="text-danger"></span>
            </div>

            <div class="form-group">
                <label asp-for="CoatLength"></label>
                <select asp-for="CoatLength" class="form-control">
                    <option value="">Select Coat Length</option>
                    @foreach (var coatLength in Enum.GetValues(typeof(CoatLength)))
                    {
                        <option value="@coatLength">@coatLength</option>
                    }
                </select>
                <span asp-validation-for="CoatLength" class="text-danger"></span>
            </div>

            <div class="form-group">
                <label asp-for="Description"></label>
                <textarea asp-for="Description" class="form-control"></textarea>
                <span asp-validation-for="Description" class="text-danger"></span>
            </div>


            <div class="form-group">
                <label asp-for="SelectedCatteryId"></label>
                <select asp-for="SelectedCatteryId" class="form-control">
                    <option value="">Select Cattery</option>
                    @foreach (var cattery in Model.Catteries)
                    {
                        <option value="@cattery.Id">@cattery.Name</option>
                    }
                </select>
                <span asp-validation-for="SelectedCatteryId" class="text-danger"></span>
            </div>

            <div id="dropzone" class="dropzone"></div>


            <button type="submit" id="submitButton" class="btn btn-primary">Add Cat</button>
        </form>
    </div>
</div>



@section Scripts {
    <partial name="_ValidationScriptsPartial" />

    <script type="text/javascript">
        Dropzone.autoDiscover = false;
        $(document).ready(function () {
            var myDropzone = new Dropzone("#dropzone", {
                url: '@Url.Action("UploadImage", "Image")', // Specify the upload URL
                maxFilesize: 5, // Maximum file size in MB
                maxFiles: 5, // Maximum number of files allowed
                acceptedFiles: 'image/*', // Specify accepted file types (e.g., images)
                addRemoveLinks: false, // Disable default "Remove file" links
                dictDefaultMessage: "Drop files here or click to upload", // Set default message
                // Other options...
            });

            // Variable to store the file currently set as cover
            var currentCoverFile = null;

            // Customize the file preview template
            myDropzone.on("addedfile", function (file) {
                // Remove the default "Remove file" link
                $(file.previewElement).find('.dz-remove').remove();

                var removeButton = Dropzone.createElement("<button class='btn btn-danger btn-sm'>Remove</button>");
                var setAsCoverButton = Dropzone.createElement("<button type='button' class='btn btn-primary btn-sm set-as-cover-btn'>Set as Cover</button>");

                // Listen for click event on "Set as Cover" button
                setAsCoverButton.addEventListener("click", function () {
                    // Check if another file is currently set as cover
                    if (currentCoverFile !== null && currentCoverFile !== file) {
                        // Reset isCover property for the previous cover file
                        currentCoverFile.isCover = false;
                        // Update UI for the previous cover file
                        $(currentCoverFile.previewElement).find('.set-as-cover-btn').text("Set as Cover");
                        $(currentCoverFile.previewElement).find('.set-as-cover-btn').removeClass("btn-success").addClass("btn-primary");
                    }
                    // Toggle between "Set as Cover" and "Cover" text
                    if (file.isCover) {
                        // Set isCover property to false for the current file
                        file.isCover = false;
                        // Update UI for the current file
                        setAsCoverButton.innerText = "Set as Cover";
                        setAsCoverButton.classList.remove("btn-success");
                        setAsCoverButton.classList.add("btn-primary");
                    } else {
                        // Set isCover property to true for the current file
                        file.isCover = true;
                        // Update UI for the current file
                        setAsCoverButton.innerText = "Cover";
                        setAsCoverButton.classList.remove("btn-primary");
                        setAsCoverButton.classList.add("btn-success");
                    }
                    // Update the currentCoverFile variable
                    currentCoverFile = file;
                });

                file.previewElement.appendChild(removeButton);
                file.previewElement.appendChild(setAsCoverButton);

                // Remove file event
                removeButton.addEventListener("click", function (e) {
                    e.preventDefault();
                    e.stopPropagation();
                    myDropzone.removeFile(file);
                    // Check if the removed file was set as cover
                    if (file === currentCoverFile) {
                        // Reset the currentCoverFile variable
                        currentCoverFile = null;
                    }
                });
            });
        });
    </script>



}






