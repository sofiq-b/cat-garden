@model CatGarden.Web.ViewModels.Cat.CatFormModel
@using static CatGarden.Common.Enums
@using CatGarden.Web.Infrastructure.Extensions

@{
    ViewData["Title"] = "Add Cat";
}

<div style="display: flex; justify-content: center; align-items: center;">
    <div style="max-width: 600px; width: 100%;">
        <h2 class="text-center">@ViewData["Title"]</h2>

        <form asp-action="Add" method="post" enctype="multipart/form-data">
            <div class="form-group">
                <label asp-for="Name"></label>
                <input asp-for="Name" class="form-control" />
                <span asp-validation-for="Name" class="text-danger"></span>
            </div>

            <div class="form-group">
                <label asp-for="Age"></label>
                <input asp-for="Age" class="form-control" />
                <span asp-validation-for="Age" class="text-danger"></span>
            </div>

            <div class="form-group">
                <label asp-for="Gender"></label>
                <select asp-for="Gender" class="form-control">
                    <option value="">Select Gender</option>
                    @foreach (var gender in Enum.GetValues(typeof(Gender)))
                    {
                        <option value="@gender">@gender</option>
                    }
                </select>
                <span asp-validation-for="Gender" class="text-danger"></span>
            </div>

            <div class="form-group">
                <label asp-for="Breed"></label>
                <select asp-for="Breed" class="form-control">
                    <option value="">Select Breed</option>
                    @foreach (Breed breed in Enum.GetValues(typeof(Breed)))
                    {
                        <option value="@breed.ToString()">@EnumExtensions.GetDisplayName(breed)</option>
                    }
                </select>
                <span asp-validation-for="Breed" class="text-danger"></span>
            </div>



            <div class="form-group">
                <label asp-for="Color"></label>
                <select asp-for="Color" class="form-control">
                    <option value="">Select Color</option>
                    @foreach (var color in Enum.GetValues(typeof(Color)))
                    {
                        <option value="@color">@color</option>
                    }
                </select>
                <span asp-validation-for="Color" class="text-danger"></span>
            </div>

            <div class="form-group">
                <label asp-for="CoatLength"></label>
                <select asp-for="CoatLength" class="form-control">
                    <option value="">Select Coat Length</option>
                    @foreach (var coatLength in Enum.GetValues(typeof(CoatLength)))
                    {
                        <option value="@coatLength">@coatLength</option>
                    }
                </select>
                <span asp-validation-for="CoatLength" class="text-danger"></span>
            </div>

            <div class="form-group">
                <label asp-for="Description"></label>
                <textarea asp-for="Description" class="form-control"></textarea>
                <span asp-validation-for="Description" class="text-danger"></span>
            </div>

            <div class="form-group">
                <label asp-for="CoverPhoto" class="control-label"></label>
                <div class="custom-file">
                    <input asp-for="CoverPhoto" class="custom-file-input" id="customFile">
                    <label class="custom-file-label" for="customFile">Choose file</label>
                </div>
                <span asp-validation-for="CoverPhoto" class="text-danger"></span>
            </div>

            @foreach (var image in Model.Images)
            {
                <div class="image-container">
                    <img src="@image.URL" alt="@image.Name" class="image-preview">
                    <form method="post" action="/Image/SetAsCover">
                        <input type="hidden" name="imageId" value="@image.Id" />
                        <button type="submit" class="btn btn-primary set-as-cover-btn">Set as Cover</button>
                    </form>
                </div>
            }


            <div class="form-group">
                <label asp-for="SelectedCatteryId"></label>
                <select asp-for="SelectedCatteryId" class="form-control">
                    <option value="">Select Cattery</option>
                    @foreach (var cattery in Model.Catteries)
                    {
                        <option value="@cattery.Id">@cattery.Name</option>
                    }
                </select>
                <span asp-validation-for="SelectedCatteryId" class="text-danger"></span>
            </div>

            <button type="submit" class="btn btn-primary">Add Cat</button>
        </form>
    </div>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
}
@section Scripts {
    <script>
        // Function to handle file input change event
        function handleFileSelect(event) {
            const previewContainer = document.getElementById('previewContainer');
            previewContainer.innerHTML = ''; // Clear existing previews

            const files = event.target.files; // Get the selected files

            // Loop through each selected file
            for (const file of files) {
                if (!file.type.match('image.*')) { // Check if the file is an image
                    continue;
                }

                const reader = new FileReader(); // Create a FileReader object

                // Define callback function for when the FileReader has loaded the file
                reader.onload = function (e) {
                    // Create an img element for the preview
                    const img = document.createElement('img');
                    img.src = e.target.result; // Set the src attribute to the loaded file data
                    img.className = 'preview-image'; // Add a class for styling

                    // Append the img element to the preview container
                    previewContainer.appendChild(img);
                };

                // Read the file as a data URL (base64 encoded string)
                reader.readAsDataURL(file);
            }
        }

        // Add event listener to the file input element
        const fileInput = document.getElementById('customFile');
        fileInput.addEventListener('change', handleFileSelect);

        // Function to handle Set as Cover button click
        function handleSetAsCover(event) {
            event.preventDefault(); // Prevent default form submission

            const form = event.target.closest('form'); // Find the parent form
            const formData = new FormData(form); // Create a FormData object from the form

            // Send a POST request to the server
            fetch('/Image/SetAsCover', {
                method: 'POST',
                body: formData
            })
                .then(response => {
                    // Handle response
                    if (response.ok) {
                        // Handle success
                        alert('Image set as cover successfully!');
                    } else {
                        // Handle error
                        alert('Failed to set image as cover.');
                    }
                })
                .catch(error => {
                    // Handle error
                    console.error('Error:', error);
                    alert('An error occurred.');
                });
        }

        // Add event listener to Set as Cover buttons
        const setAsCoverButtons = document.querySelectorAll('.set-as-cover-btn');
        setAsCoverButtons.forEach(button => {
            button.addEventListener('click', handleSetAsCover);
        });
    </script>
}

