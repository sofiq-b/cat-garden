@model CatGarden.Web.ViewModels.Cat.CatFormEditViewModel
@using static CatGarden.Common.Enums
@using CatGarden.Services.Data.Interfaces
@using CatGarden.Web.Infrastructure.Extensions
@inject IImageService ImageService

@{
    ViewData["Title"] = "Edit Cat";
}
<!-- Include Dropzone.js -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/dropzone/5.7.2/min/dropzone.min.js"></script>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/dropzone/5.7.2/min/dropzone.min.css" />


<style>
    .dropzone .dz-preview .dz-image {
        border-radius: 20px;
        overflow: hidden;
        width: 160px;
        height: 160px;
        position: relative;
        display: block;
        z-index: 10;
    }

    .dropzone .dz-preview {
        position: relative;
        display: inline-block;
        vertical-align: top;
        margin: 10px;
        min-height: 100px;
    }

        .dropzone .dz-preview .dz-image img {
            display: block;
            width: 100%;
            height: 100%;
            object-fit: cover;
        }

    .dropzone {
        pointer-events: none;
        cursor: default;
    }
</style>


<div style="display: flex; justify-content: center; align-items: center;">
    <div style="max-width: 600px; width: 100%;">
        <h2 class="text-center">@ViewData["Title"]</h2>

        <form asp-action="Edit" method="post">
            <div class="form-group">
                <label asp-for="Name"></label>
                <input asp-for="Name" class="form-control" />
                <span asp-validation-for="Name" class="text-danger"></span>
            </div>

            <div class="form-group">
                <label asp-for="Age"></label>
                <input asp-for="Age" class="form-control" />
                <span asp-validation-for="Age" class="text-danger"></span>
            </div>

            <div class="form-group">
                <label asp-for="Gender"></label>
                <select asp-for="Gender" class="form-control">
                    <option value="">Select Gender</option>
                    @foreach (var gender in Enum.GetValues(typeof(Gender)))
                    {
                        <option value="@gender">@gender</option>
                    }
                </select>
                <span asp-validation-for="Gender" class="text-danger"></span>
            </div>

            <div class="form-group">
                <label asp-for="Breed"></label>
                <select asp-for="Breed" class="form-control">
                    <option value="">Select Breed</option>
                    @foreach (Breed breed in Enum.GetValues(typeof(Breed)))
                    {
                        <option value="@breed.ToString()">@EnumExtensions.GetDisplayName(breed)</option>
                    }
                </select>
                <span asp-validation-for="Breed" class="text-danger"></span>
            </div>



            <div class="form-group">
                <label asp-for="Color"></label>
                <select asp-for="Color" class="form-control">
                    <option value="">Select Color</option>
                    @foreach (var color in Enum.GetValues(typeof(Color)))
                    {
                        <option value="@color">@color</option>
                    }
                </select>
                <span asp-validation-for="Color" class="text-danger"></span>
            </div>

            <div class="form-group">
                <label asp-for="CoatLength"></label>
                <select asp-for="CoatLength" class="form-control">
                    <option value="">Select Coat Length</option>
                    @foreach (var coatLength in Enum.GetValues(typeof(CoatLength)))
                    {
                        <option value="@coatLength">@coatLength</option>
                    }
                </select>
                <span asp-validation-for="CoatLength" class="text-danger"></span>
            </div>

            <div class="form-group">
                <label asp-for="Description"></label>
                <textarea asp-for="Description" class="form-control"></textarea>
                <span asp-validation-for="Description" class="text-danger"></span>
            </div>


            <div class="form-group">
                <label asp-for="SelectedCatteryId"></label>
                <select asp-for="SelectedCatteryId" class="form-control">
                    <option value="">Select Cattery</option>
                    @foreach (var cattery in Model.Catteries)
                    {
                        <option value="@cattery.Id">@cattery.Name</option>
                    }
                </select>
                <span asp-validation-for="SelectedCatteryId" class="text-danger"></span>
            </div>

            <button type="submit" id="submitButton" class="btn btn-primary">Add Cat</button>
        </form>

        <div id="dropzone" class="dropzone"></div>
    </div>
</div>



@section Scripts {
    <partial name="_ValidationScriptsPartial" />

    <script type="text/javascript">
        Dropzone.autoDiscover = false;
        var uploadUrl = '@Url.Action("UploadImage", "Image")';
        $(document).ready(function () {
            debugger;
            var myDropzone = new Dropzone("#dropzone", {
                url: uploadUrl, // Specify the upload URL
                maxFilesize: 5, // Maximum file size in MB
                autoProcessQueue: false,
                maxFiles: 6,
                acceptedFiles: 'image/*', // Specify accepted file types (e.g., images)
                addRemoveLinks: false, // Enable default "Remove file" links
                dictDefaultMessage: "Drop files here or click to upload", // Set default message
                parallelUploads: 1, // Upload files sequentially
                timeout: 0,
                // Other options...
            });
            var serverFileCount = 0;
            var serverImagesList;
            $.ajax({
                url: '@Url.Action("GetImageInfo", "Image")',
                method: 'GET',
                data: { folderPath: '@Model.FolderPathUrl' },
                async: true,
                success: function (data) {
                    serverImagesList = data;
                    // Loop through the file info data
                    debugger;
                    for (var i = 0; i < data.length; i++) {
                        var fileInfo = data[i]; // Access the current file info object
                        var fileName = fileInfo.name;
                        serverFileCount++;

                        var fileMimeType;
                        if (fileName.toLowerCase().endsWith('.jpg') || fileName.toLowerCase().endsWith('.jpeg')) {
                            fileMimeType = 'image/jpeg';
                        }
                        else if (fileName.toLowerCase().endsWith('.png')) {
                            fileMimeType = 'image/png';
                        }

                        var folderPath = '@Model.FolderPathUrl';
                        var wwwrootIndex = folderPath.indexOf("wwwroot/");

                        // Extract the portion of the path starting from "wwwroot/"
                        var croppedPath = folderPath.substring(wwwrootIndex + "wwwroot/".length);

                        // Combine the cropped path with the fileName
                        var finalPath = "/" + croppedPath + "/" + fileName;

                        // Simulate adding a file to Dropzone
                        var mockFile = { name: fileName, size: fileInfo.size, type: fileMimeType, serverID: fileInfo.serverID, accepted: true };
                        myDropzone.emit("addedfile", mockFile);
                        myDropzone.emit("thumbnail", mockFile, finalPath);
                        myDropzone.emit("success", mockFile);
                        myDropzone.emit("complete", mockFile);
                        myDropzone.files.push(mockFile);
                    }
                    // Update maxFiles option to include server files
                    var maxFilesAllowed = 6;
                    myDropzone.options.maxFiles = maxFilesAllowed - serverFileCount;
                },
                error: function (xhr, status, error) {
                    console.error('Error fetching server images:', error);
                }
            });
            // Customize the file preview template
            myDropzone.on("success", function (file, response) {
                // Store the image URL as a data attribute directly on the file element
                $(file.previewElement).attr('data-image-url', response);
            });

            function disableUpload() {
                myDropzone.disable(); // Disable Dropzone
            }

            // Event handler for when a file is added to Dropzone
            myDropzone.on("addedfile", function (file) {
                console.log("File added:", file);
            });

            // Event handler for when a file is removed from Dropzone
            myDropzone.on("removedfile", function (file) {
                console.log("File removed:", file);
            });

            // Event handler for when a file starts uploading
            myDropzone.on("sending", function (file, xhr, formData) {
                console.log("File sending:", file);
            });

            // Event handler for when a file upload progress is updated
            myDropzone.on("uploadprogress", function (file, progress, bytesSent) {
                console.log("File upload progress:", file, progress, bytesSent);
            });

            // Event handler for when a file upload is completed successfully
            myDropzone.on("success", function (file, response) {
                console.log("File upload success:", file, response);
            });

            // Event handler for when a file upload encounters an error
            myDropzone.on("error", function (file, errorMessage) {
                console.log("File upload error:", file, errorMessage);
            });

            // Event handler for when all files have been uploaded
            myDropzone.on("complete", function (file) {
                console.log("File upload complete:", file);
            });
        });
    </script>
}









